name: Update README

on:
  schedule:
    - cron: "0 */6 * * *" # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
  workflow_dispatch: # –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install axios dayjs

      - name: Update README
        run: |
          node << 'EOF'
          const fs = require('fs');
          const axios = require('axios');
          const dayjs = require('dayjs');

          const username = "Gerasha0";
          const readmePath = "README.md";

          async function getRepos() {
            try {
              const res = await axios.get(`https://api.github.com/users/${username}/repos?sort=updated&per_page=10`);
              return res.data
                .filter(repo => repo.name !== username) // Skip profile repo
                .map(repo => {
                  // Map GitHub repos to local study paths
                  const repoMap = {
                    'electronic-department-system': 'studies/software-architecture-and-design/coursework/electronic-department-system',
                    'spring-db-demo': 'studies/software-construction-and-documentation/laboratory-works/spring-db-demo',
                    'JobExchangeConsole': 'studies/object-oriented-programming/coursework/JobExchangeConsole',
                    'JobExchangeWebsite': 'studies/human-computer-interaction/laboratory-works/JobExchangeWebsite',
                    'lab1': 'studies/software-development-workshop/laboratory-works/lab1',
                    'lab2': 'studies/software-development-workshop/laboratory-works/lab2',
                    'lab3': 'studies/software-development-workshop/laboratory-works/lab3',
                    'lab4': 'studies/software-development-workshop/laboratory-works/lab4'
                  };
                  
                  const localPath = repoMap[repo.name] || repo.html_url;
                  return `- [${repo.name}](${localPath}) ‚Äî ${dayjs(repo.updated_at).format('YYYY-MM-DD HH:mm')}`;
                });
            } catch (error) {
              console.error('Error fetching repos:', error);
              return [];
            }
          }

          async function getCommits() {
            try {
              const repos = await axios.get(`https://api.github.com/users/${username}/repos?per_page=5&sort=updated`);
              let commitsList = [];

              for (let repo of repos.data) {
                if (repo.name === username) continue; // Skip profile repo
                
                try {
                  const commits = await axios.get(`https://api.github.com/repos/${username}/${repo.name}/commits?per_page=1`);
                  const commit = commits.data[0];
                  if (commit) {
                    commitsList.push(`- **${repo.name}**: [${commit.commit.message}](${commit.html_url}) ‚Äî ${dayjs(commit.commit.author.date).format('YYYY-MM-DD HH:mm')}`);
                  }
                } catch (error) {
                  console.log(`Skipping ${repo.name}: ${error.message}`);
                }
              }
              return commitsList;
            } catch (error) {
              console.error('Error fetching commits:', error);
              return [];
            }
          }

          (async () => {
            try {
              let readme = fs.readFileSync(readmePath, "utf8");

              // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ù–ï –¢–†–û–ì–ê–ï–ú –æ–ø–∏—Å–∞–Ω–∏—è!)
              const projects = await getRepos();
              if (projects.length > 0) {
                readme = readme.replace(/(<!-- PROJECTS_START -->)([\s\S]*?)(<!-- PROJECTS_END -->)/, `$1\n${projects.join('\n')}\n$3`);
                console.log('‚úÖ Updated projects list');
              }

              // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
              const commits = await getCommits();
              if (commits.length > 0) {
                readme = readme.replace(/(<!-- COMMITS_START -->)([\s\S]*?)(<!-- COMMITS_END -->)/, `$1\n${commits.join('\n')}\n$3`);
                console.log('‚úÖ Updated commits list');
              }

              // –ù–ï –¢–†–û–ì–ê–ï–ú —Å–µ–∫—Ü–∏—é "üìÇ Project Details" - –æ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ä—É—á–Ω–æ–π!
              console.log('‚úÖ Project descriptions preserved - no automatic changes');

              fs.writeFileSync(readmePath, readme);
              console.log('üéâ README updated successfully!');
            } catch (error) {
              console.error('‚ùå Error updating README:', error);
              process.exit(1);
            }
          })();
          EOF

      - name: Commit and Push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "chore: auto-update README [skip ci]" || exit 0
          git push
