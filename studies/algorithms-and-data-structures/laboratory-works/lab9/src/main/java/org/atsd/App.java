package org.atsd;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 2.3
 * –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∫–æ–º–±—ñ–Ω–∞—Ç–æ—Ä–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
 *
 * –í–∞—Ä—ñ–∞–Ω—Ç 7
 * –ê–≤—Ç–æ—Ä: [–í–∞—à–µ —ñ–º'—è]
 */
public class App {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("‚ïî" + "‚ïê".repeat(48) + "‚ïó");
        System.out.println("‚ïë     –õ–ê–ë–û–†–ê–¢–û–†–ù–ê –†–û–ë–û–¢–ê 2.3                   ‚ïë");
        System.out.println("‚ïë  –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∫–æ–º–±—ñ–Ω–∞—Ç–æ—Ä–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤        ‚ïë");
        System.out.println("‚ïë              –í–∞—Ä—ñ–∞–Ω—Ç 7                       ‚ïë");
        System.out.println("‚ïö" + "‚ïê".repeat(48) + "‚ïù");
        System.out.println();

        while (true) {
            System.out.println("‚ï≠" + "‚îÄ".repeat(48) + "‚ïÆ");
            System.out.println("‚îÇ                –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ                  ‚îÇ");
            System.out.println("‚îú" + "‚îÄ".repeat(48) + "‚î§");
            System.out.println("‚îÇ 1. –ó–∞–≤–¥–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ä—ñ–≤–Ω—è                    ‚îÇ");
            System.out.println("‚îÇ 2. –ó–∞–≤–¥–∞–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ —Ä—ñ–≤–Ω—è                    ‚îÇ");
            System.out.println("‚îÇ 3. –ó–∞–≤–¥–∞–Ω–Ω—è —Ç—Ä–µ—Ç—å–æ–≥–æ —Ä—ñ–≤–Ω—è                   ‚îÇ");
            System.out.println("‚îÇ 4. –í–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ          ‚îÇ");
            System.out.println("‚îÇ 0. –í–∏—Ö—ñ–¥                                     ‚îÇ");
            System.out.println("‚ï∞" + "‚îÄ".repeat(48) + "‚ïØ");
            System.out.print("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-4): ");

            int choice = getValidIntInput(scanner, 0, 4);

            switch (choice) {
                case 1:
                    executeTask1(scanner);
                    break;
                case 2:
                    executeTask2(scanner);
                    break;
                case 3:
                    executeTask3(scanner);
                    break;
                case 4:
                    executeAllTasks(scanner);
                    break;
                case 0:
                    System.out.println("\n‚ïî" + "‚ïê".repeat(40) + "‚ïó");
                    System.out.println("‚ïë   –î—è–∫—É—îÔøΩÔøΩ–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏!    ‚ïë");
                    System.out.println("‚ïë          –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã               ‚ïë");
                    System.out.println("‚ïö" + "‚ïê".repeat(40) + "‚ïù");
                    scanner.close();
                    return;
                default:
                    System.out.println("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n");
                    continue;
            }

            // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –¥–æ –º–µ–Ω—é
            System.out.println("\n" + "‚îÄ".repeat(50));
            System.out.println("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é...");
            waitForEnter(scanner);
            System.out.println();
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –≤–∞–ª—ñ–¥–Ω–∏–π —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–∏–π –≤–≤—ñ–¥ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    private static int getValidIntInput(Scanner scanner, int min, int max) {
        while (true) {
            try {
                String input = scanner.nextLine().trim();
                if (input.isEmpty()) {
                    System.out.print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ " + min + " –¥–æ " + max + ": ");
                    continue;
                }

                int value = Integer.parseInt(input);
                if (value >= min && value <= max) {
                    return value;
                } else {
                    System.out.print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ " + min + " –¥–æ " + max + ": ");
                }
            } catch (NumberFormatException e) {
                System.out.print("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ: ");
            } catch (Exception e) {
                System.out.print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ");
            }
        }
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –≤–∞–ª—ñ–¥–Ω–∏–π –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–∏–π –≤–≤—ñ–¥
     */
    private static int getValidPositiveInt(Scanner scanner, String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                String input = scanner.nextLine().trim();
                if (input.isEmpty()) {
                    System.out.println("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0!");
                    continue;
                }

                int value = Integer.parseInt(input);
                if (value > 0) {
                    return value;
                } else {
                    System.out.println("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0!");
                }
            } catch (NumberFormatException e) {
                System.out.println("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!");
            } catch (Exception e) {
                System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }
        }
    }

    /**
     * –ß–µ–∫–∞—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Enter –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    private static void waitForEnter(Scanner scanner) {
        try {
            scanner.nextLine();
        } catch (Exception e) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
        }
    }

    private static void executeTask1(Scanner scanner) {
        System.out.println("\n‚ï≠" + "‚îÄ".repeat(50) + "‚ïÆ");
        System.out.println("‚îÇ           –ó–ê–í–î–ê–ù–ù–Ø –ü–ï–†–®–û–ì–û –†–Ü–í–ù–Ø             ‚îÇ");
        System.out.println("‚ï∞" + "‚îÄ".repeat(50) + "‚ïØ");

        System.out.println("üìã –£–º–æ–≤–∞: –°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –≥—É—Ä—Ç–æ–∫ –º—ñ—Å—Ç–∏—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤.");
        System.out.println("   –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–ª–∞—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –µ—Å—Ç–∞—Ñ–µ—Ç–∏,");
        System.out.println("   –¥–µ –≤–∞–∂–ª–∏–≤–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤.");
        System.out.println();

        int n1 = getValidPositiveInt(scanner, "üë• –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É –≥—É—Ä—Ç–∫—É: ");
        int k1 = getValidPositiveInt(scanner, "üèÉ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ: ");

        if (k1 > n1) {
            System.out.println("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤!");
            k1 = getValidPositiveInt(scanner, "üèÉ –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ (‚â§" + n1 + "): ");
        }

        System.out.println("\nüîç –ê–ù–ê–õ–Ü–ó –ó–ê–î–ê–ß–Ü:");
        System.out.println("   ‚Ä¢ –ú–∞—î–º–æ " + n1 + " —Ä—ñ–∑–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤");
        System.out.println("   ‚Ä¢ –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ " + k1 + " —É—á–∞—Å–Ω–∏–∫—ñ–≤");
        System.out.println("   ‚Ä¢ –í–∞–∂–ª–∏–≤–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å (–ø–æ—Ä—è–¥–æ–∫) —É—á–∞—Å–Ω–∏–∫—ñ–≤");
        System.out.println("   ‚Ä¢ –ö–æ–∂–µ–Ω —É—á–∞—Å–Ω–∏–∫ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑");

        System.out.println("\nüí° –¢–ò–ü –í–ò–ë–Ü–†–ö–ò: –†–û–ó–ú–Ü–©–ï–ù–ù–Ø –ë–ï–ó –ü–û–í–¢–û–†–ï–ù–¨");
        System.out.println("üìê –§–û–†–ú–£–õ–ê: A(n,k) = n! / (n-k)!");

        System.out.print("\n‚öôÔ∏è  –û–±—á–∏—Å–ª—é—î–º–æ...");
        for (int i = 0; i < 3; i++) {
            try {
                Thread.sleep(500);
                System.out.print(".");
            } catch (InterruptedException e) {}
        }

        long result1 = calculateArrangements(n1, k1);

        System.out.println("\n\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:");
        System.out.println("   A(" + n1 + "," + k1 + ") = " + n1 + "! / (" + n1 + "-" + k1 + ")!");
        System.out.println("   A(" + n1 + "," + k1 + ") = " + n1 + "! / " + (n1-k1) + "!");

        // –ü–æ–∫–∞–∑—É—î–º–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ
        System.out.print("   A(" + n1 + "," + k1 + ") = ");
        for (int i = n1; i > n1 - k1; i--) {
            System.out.print(i);
            if (i > n1 - k1 + 1) {
                System.out.print(" √ó ");
            }
        }
        System.out.println(" = " + result1);

        System.out.println("\nüéØ –í–Ü–î–ü–û–í–Ü–î–¨: " + result1 + " –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Å–∫–ª–∞–¥—É –∫–æ–º–∞–Ω–¥–∏");
    }

    private static void executeTask2(Scanner scanner) {
        System.out.println("\n‚ï≠" + "‚îÄ".repeat(50) + "‚ïÆ");
        System.out.println("‚îÇ           –ó–ê–í–î–ê–ù–ù–Ø –î–†–£–ì–û–ì–û –†–Ü–í–ù–Ø             ‚îÇ");
        System.out.println("‚ï∞" + "‚îÄ".repeat(50) + "‚ïØ");

        System.out.println("üìã –£–º–æ–≤–∞: –¶–∏—Ñ—Ä–∏ –¥–≤—ñ–π–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ —á–∏—Å–ª–µ–Ω–Ω—è (0, 1).");
        System.out.println("   –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª –ø–µ–≤–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É.");
        System.out.println();

        int bits = getValidPositiveInt(scanner, "üíæ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ—Ç (–¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∞–π—Ç–∞ = 8): ");

        System.out.println("\nüîç –ê–ù–ê–õ–Ü–ó –ó–ê–î–ê–ß–Ü:");
        System.out.println("   ‚Ä¢ –ú–∞—î–º–æ 2 —Ü–∏—Ñ—Ä–∏ –¥–≤—ñ–π–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏: {0, 1}");
        System.out.println("   ‚Ä¢ –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —á–∏—Å–ª–æ –∑ " + bits + " –±—ñ—Ç");
        System.out.println("   ‚Ä¢ –ù–∞ –∫–æ–∂–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó –º–æ–∂–µ –±—É—Ç–∏ –±—É–¥—å-—è–∫–∞ –∑ 2 —Ü–∏—Ñ—Ä");
        System.out.println("   ‚Ä¢ –¶–∏—Ñ—Ä–∏ –º–æ–∂—É—Ç—å –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏—Å—å");

        System.out.println("\nüí° –¢–ò–ü –í–ò–ë–Ü–†–ö–ò: –†–û–ó–ú–Ü–©–ï–ù–ù–Ø –ó –ü–û–í–¢–û–†–ï–ù–ù–Ø–ú–ò");
        System.out.println("üìê –§–û–†–ú–£–õ–ê: A'(n,k) = n^k");

        System.out.print("\nÔøΩÔøΩÔøΩÔ∏è  –û–±—á–∏—Å–ª—é—î–º–æ...");
        for (int i = 0; i < 3; i++) {
            try {
                Thread.sleep(500);
                System.out.print(".");
            } catch (InterruptedException e) {}
        }

        long result2 = calculateArrangementsWithRepetition(2, bits);

        System.out.println("\n\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:");
        System.out.println("   A'(2," + bits + ") = 2^" + bits + " = " + result2);

        System.out.println("\nüéØ –í–Ü–î–ü–û–í–Ü–î–¨: " + result2 + " —Ä—ñ–∑–Ω–∏—Ö —á–∏—Å–µ–ª —Ä–æ–∑–º—ñ—Ä–æ–º " + bits + " –±—ñ—Ç");

        if (bits <= 4) {
            System.out.println("\nÔøΩÔøΩÔøΩ –ü—Ä–∏–∫–ª–∞–¥–∏ —á–∏—Å–µ–ª (–ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞):");
            showBinaryNumbers(bits, Math.min(16, (int)result2));
        }
    }

    private static void executeTask3(Scanner scanner) {
        System.out.println("\n‚ï≠" + "‚îÄ".repeat(50) + "‚ïÆ");
        System.out.println("‚îÇ          –ó–ê–í–î–ê–ù–ù–Ø –¢–†–ï–¢–¨–û–ì–û –†–Ü–í–ù–Ø             ‚îÇ");
        System.out.println("‚ï∞" + "‚îÄ".repeat(50) + "‚ïØ");

        System.out.println("üìã –£–º–æ–≤–∞: –ó–∞–ø–∏—Å–∞—Ç–∏ —É —Ñ–∞–π–ª –ø–æ–≤–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ —Ä–æ–∑–º—ñ—â–µ–Ω—å");
        System.out.println("   –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ä—ñ–≤–Ω—è.");
        System.out.println();

        int n = getValidPositiveInt(scanner, "üë• –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É –≥—É—Ä—Ç–∫—É: ");
        int k = getValidPositiveInt(scanner, "üèÉ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ: ");

        if (k > n) {
            System.out.println("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤!");
            k = getValidPositiveInt(scanner, "üèÉ –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ (‚â§" + n + "): ");
        }

        long totalArrangements = calculateArrangements(n, k);

        System.out.println("\nüî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω—å A(" + n + "," + k + ") = " + totalArrangements);

        if (totalArrangements > 5000) {
            System.out.println("‚ö†Ô∏è  –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –í–µ–ª–∏–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω—å (" + totalArrangements + ")!");
            System.out.print("   –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é? (y/n): ");
            String answer = scanner.nextLine().trim();
            if (!answer.toLowerCase().startsWith("y")) {
                System.out.println("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
                return;
            }
        }

        System.out.print("\n‚öôÔ∏è  –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è");
        generateAndSaveArrangements(n, k);
    }

    private static void executeAllTasks(Scanner scanner) {
        System.out.println("\n‚ï≠" + "‚îÄ".repeat(55) + "‚ïÆ");
        System.out.println("‚îÇ        –í–ò–ö–û–ù–ê–ù–ù–Ø –í–°–Ü–• –ó–ê–í–î–ê–ù–¨ –ü–û–°–õ–Ü–î–û–í–ù–û        ‚îÇ");
        System.out.println("‚ï∞" + "ÔøΩÔøΩÔøΩ".repeat(55) + "‚ïØ");

        // –ó–∞–≤–¥–∞–Ω–Ω—è 1
        System.out.println("\nüî¥ –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ä—ñ–≤–Ω—è...");
        int n1 = getValidPositiveInt(scanner, "üë• –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É –≥—É—Ä—Ç–∫—É: ");
        int k1 = getValidPositiveInt(scanner, "üèÉ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ: ");

        if (k1 > n1) {
            System.out.println("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤!");
            k1 = getValidPositiveInt(scanner, "üèÉ –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ (‚â§" + n1 + "): ");
        }

        long result1 = calculateArrangements(n1, k1);
        System.out.println("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 1: A(" + n1 + "," + k1 + ") = " + result1);

        // –ó–∞–≤–¥–∞–Ω–Ω—è 2
        System.out.println("\nüü° –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ —Ä—ñ–≤–Ω—è...");
        int bits = getValidPositiveInt(scanner, "üíæ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ—Ç: ");

        long result2 = calculateArrangementsWithRepetition(2, bits);
        System.out.println("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 2: A'(2," + bits + ") = " + result2);

        // –ó–∞–≤–¥–∞–Ω–Ω—è 3
        System.out.println("\nüü¢ –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç—Ä–µ—Ç—å–æ–≥–æ —Ä—ñ–≤–Ω—è...");
        System.out.println("üìù –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ–∞–π–ª –∑ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è–º–∏ –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è 1...");
        generateAndSaveArrangements(n1, k1);

        System.out.println("\nüéâ –í–°–Ü –ó–ê–í–î–ê–ù–ù–Ø –í–ò–ö–û–ù–ê–ù–û –£–°–ü–Ü–®–ù–û!");
        System.out.println("üìä –ü—ñ–¥—Å—É–º–æ–∫:");
        System.out.println("   ‚Ä¢ –ó–∞–≤–¥–∞–Ω–Ω—è 1: " + result1 + " –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥ÔøΩÔøΩ");
        System.out.println("   ‚Ä¢ –ó–∞–≤–¥–∞–Ω–Ω—è 2: " + result2 + " –¥–≤—ñ–π–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª");
        System.out.println("   ‚Ä¢ –ó–∞–≤–¥–∞–Ω–Ω—è 3: –§–∞–π–ª '—Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è.txt' —Å—Ç–≤–æ—Ä–µ–Ω–æ");
    }

    private static void showBinaryNumbers(int bits, int count) {
        System.out.print("   ");
        for (int i = 0; i < count; i++) {
            String binary = String.format("%" + bits + "s", Integer.toBinaryString(i)).replace(' ', '0');
            System.out.print(binary + " ");
            if ((i + 1) % 8 == 0) {
                System.out.println();
                System.out.print("   ");
            }
        }
        if (count % 8 != 0) {
            System.out.println();
        }
    }

    /**
     * –û–±—á–∏—Å–ª—é—î —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å A(n,k) = n! / (n-k)!
     */
    public static long calculateArrangements(int n, int k) {
        if (k > n) return 0;

        long result = 1;
        for (int i = n; i > n - k; i--) {
            result *= i;
        }
        return result;
    }

    /**
     * –û–±—á–∏—Å–ª—é—î —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è–º–∏ A'(n,k) = n^k
     */
    public static long calculateArrangementsWithRepetition(int n, int k) {
        return (long) Math.pow(n, k);
    }

    /**
     * –û–±—á–∏—Å–ª—é—î —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª —á–∏—Å–ª–∞
     */
    public static long factorial(int n) {
        if (n <= 1) return 1;
        long result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Å—É—î —ó—Ö —É —Ñ–∞–π–ª
     */
    public static void generateAndSaveArrangements(int n, int k) {
        List<List<Integer>> arrangements = new ArrayList<>();

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
        System.out.println();
        System.out.print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—â–µ–Ω—å: ");

        generateArrangementsRecursive(n, k, new ArrayList<>(), new boolean[n], arrangements);

        System.out.println("‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!");

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª —É –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
        String fileName = "—Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è.txt";
        String fullPath = System.getProperty("user.dir") + "\\" + fileName;

        try (FileWriter writer = new FileWriter(fileName, java.nio.charset.StandardCharsets.UTF_8)) {
            writer.write("‚ïî" + "‚ïê".repeat(50) + "‚ïó\n");
            writer.write("‚ïë          –í–°–Ü –ú–û–ñ–õ–ò–í–Ü –†–û–ó–ú–Ü–©–ï–ù–ù–Ø A(" + n + "," + k + ")        ‚ïë\n");
            writer.write("‚ïë            –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 2.3            ‚ïë\n");
            writer.write("‚ïë                 –í–∞—Ä—ñ–∞–Ω—Ç 7                    ‚ïë\n");
            writer.write("‚ïö" + "‚ïê".repeat(50) + "‚ïù\n\n");

            writer.write("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: " + arrangements.size() + "\n");
            writer.write("‚ïê".repeat(52) + "\n\n");

            int counter = 1;
            int columns = 5; // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

            for (int i = 0; i < arrangements.size(); i++) {
                List<Integer> arrangement = arrangements.get(i);
                writer.write(String.format("%4d: (", counter++));

                for (int j = 0; j < arrangement.size(); j++) {
                    writer.write(arrangement.get(j).toString());
                    if (j < arrangement.size() - 1) {
                        writer.write(", ");
                    }
                }
                writer.write(")");

                if (i % columns == columns - 1) {
                    writer.write("\n");
                } else {
                    writer.write("  ");
                }
            }

            if (arrangements.size() % columns != 0) {
                writer.write("\n");
            }

            writer.write("\n" + "‚ïê".repeat(52) + "\n");
            writer.write("–§–∞–π–ª –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: " + java.time.LocalDateTime.now().format(
                java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss")
            ) + "\n");

            System.out.println("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—è —É —Ñ–∞–π–ª '" + fileName + "'");
            System.out.println("üìÅ –ü–æ–≤–Ω–∏–π —à–ª—è—Ö: " + fullPath);
            System.out.println("üìä –§–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å " + arrangements.size() + " —Ä–æ–∑–º—ñ—â–µ–Ω—å");
        } catch (IOException e) {
            System.err.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É —Ñ–∞–π–ª: " + e.getMessage());
        }
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–æ–∑–º—ñ—â–µ–Ω—å
     */
    private static void generateArrangementsRecursive(int n, int k, List<Integer> current,
                                                     boolean[] used, List<List<Integer>> result) {
        if (current.size() == k) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = 1; i <= n; i++) {
            if (!used[i-1]) {
                current.add(i);
                used[i-1] = true;
                generateArrangementsRecursive(n, k, current, used, result);
                current.remove(current.size() - 1);
                used[i-1] = false;
            }
        }
    }
}
